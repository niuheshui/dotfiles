# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: 字体 {{{


#: kitty有非常强大的字体管理功能。您可以配置单独的字体，甚至可以为特定字符指定特殊字体。

font_family Ubuntu Mono
粗体字体自动
斜体字体自动
粗斜体字体自动


#：您可以为粗体/斜体/粗斜体变体指定不同的字体。要获取支持字体的完整列表，请使用“kitty list-fonts”命令。默认情况下，它们是由网络字体系统自动导出手动设置它们对于具有许多粗细变体（如 Book、Medium、Thick 等）的字体系列非常有用。例如：

#: font_family 运算符 Mono Book
#：bold_font 运算符 Mono Medium
#: italic_font 运算符 Mono Book Italic
#：bold_italic_font Operator Mono Medium Italic

字体大小 24

#：字体大小（以磅为单位）

强制_LTR 否

#：kitty不支持BIDI（双向文本），但是，对于RTL脚本，单词会自动以RTL显示。也就是说，在 RTL 脚本中，单词“HELLO WORLD”在 kitty 中显示为“WORLD HELLO”，如果您尝试选择 RTL 形状字符串的子字符串，您将得到该字符该字符串已LTR。例如，假设希伯来语单词 йרושלйם，选择屏幕上显示为 ם 的字符实际上会将字符 й 写入选择缓冲区。kitty 的默认行为与过滤器结合使用以反转词序非常有用，但是，如果您希望操纵 RTL 字形，则使用它可能非常具有挑战性，因此提供了此选项来将其关闭。此外，此选项可以与命令行程序 GNU FriBidi <https:

调整线高 0
调整列宽 0

#：更改 kitty 渲染的每个字符单元格的大小。您可以使用数字（解释为像素）或百分比（数字后跟 %）（解释为未修改值的百分比）。您可以使用负像素或小于 100% 的百分比来减小尺寸（但这可能会导致渲染伪影）。

调整基线 0

#：调整文本的垂直对齐方式（文本所在单元格的高度）。您可以使用数字（解释为像素）或百分比（数字后跟 %）（解释为行高的百分比）。正值使基线向上移动，负值使基线向下移动。下划线和删除线的位置也相应调整。

# symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 电力线符号

#：将指定的 unicode 代码点映射到特定字体。如果您需要对某些符号（例如电力线）进行特殊渲染，则非常有用。避免需要修补字体。每个 unicode 代码点均以 U+<十六进制代码点> 的形式指定。您可以指定多个代码点，以逗号分隔，范围以连字符分隔。symbol_map 本身可以指定多次。语法是::

#: symbol_map 代码点 字体系列名称

永远禁用连字

#：选择您想要如何处理多字符连字。默认设置是始终渲染它们。您可以通过使用光标来告诉 kitty 当光标位于它们上方时不要渲染它们，以使编辑更容易，或者如果您不喜欢它们，则可以通过使用always 让 kitty 根本不渲染它们。可以使用 kitty 远程控制工具或通过在 kitty.conf 中为其定义快捷方式来为每个窗口设置连字策略，例如：

#: 地图 alt+1disable_ligatures_in 始终处于活动状态
#: 映射 alt+2disable_ligatures_in 全部从不
#: 映射 alt+3disable_ligatures_in 选项卡光标

#：请注意，这是指编程连字，通常使用 calt OpenType 功能实现。要禁用一般连字，请使用 font_features 设置。

# font_features 无

#：准确选择要启用或禁用的 OpenType 功能。这很有用，因为某些字体可能具有在终端中有价值的功能。例如，Fira Code Retina 包含一个任意功能“零”，该功能会改变该字体中零 (0) 的外观，以使其更容易与 Ø 区分开。Fira Code Retina 还包括其他称为风格集的任意功能，其标签为 ss01 到 ss20。

#：有关各个功能使用的确切语法，请参阅 Harfbuzz 文档 <https://harfbuzz.github.io/harfbuzz-hb-common.html#hb-feature-from-string>。

#：请注意，此代码是按 PostScript 名称而不是字体系列进行索引的。这允许您定义非常精确的功能设置；例如，您可以禁用斜体字体的功能，但不能禁用常规字体的功能。

#：在 Linux 上，首先从 FontConfig 数据库读取这些内容，然后应用此设置，因此可以在单个中央位置配置它们。

#：要获取字体的 PostScript 名称，请使用 kitty + list-fonts --psnames：

#: .. 代码块:: sh

#: $ kitty + 列表字体 --psnames | grep 费拉
#: 费拉代码
#：Fira 代码粗体 (FiraCode-Bold)
#：Fira Code Light（FiraCode-Light）
#：Fira Code Medium（FiraCode-Medium）
#：Fira 代码常规（FiraCode-Regular）
#：Fira Code Retina（FiraCode-Retina）

#：括号内的部分是PostScript名称。

#：启用替代零和旧式数字::

#: font_features FiraCode-Retina +zero +onum

#：仅启用备用零::

#: font_features FiraCode-Retina +零

#：禁用普通连字，但保留 calt 功能（在此字体中）打破单调::

#: font_features TT2020StyleB-Regular -liga +calt

#：与force_ltr结合使用，您可能希望完全禁用阿拉伯语整形，并且仅在它们出现在文档中时查看它们的独立形式。你可以用例如::

#: font_features UnifontMedium +isol -medi -fina -init

box_drawing_scale 0.001, 1, 1.5, 2

#：更改用于绘制 unicode 字符的方框的线条大小 这些值以磅为单位。它们将根据显示器 DPI 进行缩放以获得像素值。必须有四个值对应于细线、正常线、粗线和非常粗线。

#: }}}

#: 光标自定义 {{{

光标#cccccc

#：默认光标颜色

光标文本颜色#111111

#：选择光标下文本的颜色。如果您希望使用下面单元格的背景颜色进行渲染，请使用特殊关键字：background

光标形状块

#：光标形状可以是（块、梁、下划线）之一。请注意，重新加载配置时，仅当终端中运行的程序尚未设置光标形状时，才会更改此配置。

光标光束厚度 1.5

#：定义光束光标的厚度（以磅为单位）

光标下划线厚度 2.0

#：定义下划线光标的粗细（以磅为单位）

光标闪烁间隔 -1

#：光标闪烁的时间间隔（以秒为单位）。设置为零以禁用闪烁。负值表示使用系统默认值。请注意，小于 repaint_delay 的数字将被限制为 repaint_delay。

15.0 后光标停止闪烁

#：键盘不活动指定的秒数后停止闪烁光标。设置为零即可永不停止闪烁。

#: }}}

#: 向后滚动 {{{

回滚行 2000

#：保留在内存中以便向后滚动的历史行数。内存是按需分配的。负数（实际上）是无限回滚。请注意，不建议使用非常大的回滚，因为它会降低终端的性能并且还会使用大量 RAM。相反，请考虑使用scrollback_pager_history_size。请注意，在配置重新加载时，如果更改它只会影响新创建的窗口，而不影响现有窗口。

rollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#：用于在新窗口中查看回滚的程序。回滚缓冲区作为 STDIN 传递给该程序。如果您更改它，请确保您使用的程序可以处理颜色和文本格式的 ANSI 转义序列。上面命令行中的 INPUT_LINE_NUMBER 将被替换为表示哪一行应位于屏幕顶部的整数。同样，CURSOR_LINE 和 CURSOR_COLUMN 将被当前光标位置替换。

scrollback_pager_history_size 0

#：单独的回滚历史大小，仅用于浏览回滚缓冲区（以MB为单位）。该单独的缓冲区不可用于交互式滚动，但在单独的窗口中查看回滚缓冲区时将通过管道传输到分页程序。当前实现以 UTF-8 格式存储数据，因此对于纯 ASCII 文本、无格式文本，每兆字节大约 10000 行，每行 100 个字符。零或小于零的值将禁用此功能。允许的最大大小为 4GB。请注意，在配置重新加载时，如果更改它只会影响新创建的窗口，而不影响现有窗口。

scrollback_fill_enlarged_window 否

#：放大窗口后，用回滚缓冲区中的行填充新空间。

滚轮滚动乘数 5.0

#：修改鼠标滚轮滚动的量。请注意，这仅用于低精度滚动设备，不适用于 macOS 和 Wayland 等平台上的高精度滚动。使用负数来更改滚动方向。

touch_scroll_multiplier 1.0

#：修改触摸板滚动的量。请注意，这仅适用于 macOS 和 Wayland 等平台上的高精度滚动设备。使用负数来更改滚动方向。

#: }}}

＃： 老鼠 {{{

鼠标隐藏等待 3.0

#：在鼠标不使用指定秒数后隐藏鼠标光标。设置为零以禁用鼠标光标隐藏。设置为负值可在键入文本时立即隐藏鼠标光标。在 macOS 上默认禁用，因为要让它与 Cocoa 不断变化的 bug 海洋稳定地工作需要付出太多的努力。

url_颜色 #0087bd
url_style 卷曲

#：鼠标悬停时突出显示 URL 的颜色和样式。url_style 可以是以下之一：none、single、double、curly

open_url_with 默认值

#：用于打开单击的 URL 的程序。特殊值default表示使用操作系统的默认URL处理程序。

url_prefixes http https 文件 ftp gemini irc gopher mailto 新闻 git

#：检测鼠标光标下的 URL 时要查找的 URL 前缀集。

检测网址 是

#：检测鼠标下的URL。检测到的 URL 会用下划线突出显示，并且鼠标光标会变成一只手放在它们上面。即使禁用此选项，URL 仍然可以单击。

url_excluded_characters

#：在检测鼠标光标下的 URL 时，禁止在 URL 中出现的其他字符。默认情况下，允许 URL 中的所有合法字符。

选择时复制 否

#：选择时复制到剪贴板或专用缓冲区。将其设置为剪贴板后，只需用鼠标选择文本即可将文本复制到剪贴板。在 macOS 等没有主要选择概念的平台上很有用。您可以指定一个名称（例如 a1）来复制到专用的 kitty 缓冲区。使用paste_from_buffer 操作映射快捷方式以从此专用缓冲区进行粘贴。例如：：

#: 映射 cmd+shift+v Paste_from_buffer a1

#：请注意，复制到剪贴板存在安全风险，因为所有程序（包括在浏览器中打开的网站）都可以读取系统剪贴板的内容。

strip_trailing_spaces 从不

#：复制到剪贴板时删除行尾空格。smart 值在使用普通选择时会执行此操作，但在使用矩形选择时则不会。永远会永远这样做。

select_by_word_characters @-./_~?&=%+#

#：双击时将字符视为单词的一部分。除了这些字符之外，还将匹配在 unicode 数据库中标记为字母数字字符的任何字符。

点击间隔-1.0

#：检测双击/三次单击的连续单击之间的时间间隔（以秒为单位）。负数将使用系统默认值（如果可用），或回退到 0.5。

focus_follows_mouse 否

#: 设置鼠标移动时活动窗口为鼠标下方的窗口

抓取箭头时的指针形状

#：终端中运行的程序抓取鼠标时鼠标指针的形状。有效值为：箭头、光束和手

default_pointer_shape 梁

#：鼠标指针的默认形状。有效值为：箭头、光束和手

拖动梁时的指针形状

#：在文本上拖动时鼠标指针的默认形状。有效值为：箭头、光束和手

#: 鼠标操作 {{{

#：可以重新映射鼠标按钮以执行任意操作。这
#: 这样做的语法是：

#: .. 代码块:: 无

#: mouse_map 按钮名称 事件类型 模式 动作

#：其中“按钮名称”是“左”、“中”、“右”或之一
#: ``b1 ... b8`` 添加了键盘修饰符，例如：
#: ``ctrl+shift+left`` 指的是按住 ctrl+shift 键的同时
#：用鼠标左键单击。数字``b1 ... b8``可以
#：用于指代鼠标上最多八个按钮。

#: ``event-type`` 是一个 ``press``, ``release``, ``doublepress``,
#：“三次按下”、“单击”和“双击”。``模式``
#：表示鼠标被抓取时是否执行动作
#：由终端中运行的程序决定，或不由程序决定。它可以有一个或
#：更多或值，“抓住，未抓住”。“抓住”是指
#：当终端中运行的程序请求鼠标时
#：事件。请注意，单击和双击事件有延迟
#: click_interval 消除双击和三次按下的歧义。

#: 您可以使用 kitty --debug-input 命令行选项运行 kitty
#：查看鼠标事件。请参阅下面的内置操作来了解一下
#：什么是可能的。

#：如果您想取消映射某个操作，请将其映射到“no-op”。例如，要
#: 禁止通过简单的点击打开 URL::

#: mouse_map 左键单击未抓取无操作

＃： .. 笔记：：
#：一旦开始选择，释放开始选择的按钮将
#：自动结束并且不会调度任何释放事件。

mouse_map 左键单击未抓取 mouse_click_url_or_select
mouse_map shift+左键点击抓取，取消抓取 mouse_click_url_or_select
mouse_map ctrl+shift+左释放 已抓取、未抓取 mouse_click_url

#：存在 ctrl+shift 的变体，因为基于简单的点击
#：版本有一个不可避免的延迟 click_interval，以消除歧义
#：双击产生的点击次数。

mouse_map ctrl+shift+左键按下抓取discard_event

#: 阻止此新闻事件被发送到已存在的程序
#：抓住鼠标，相应的释放事件用于
#：打开一个 URL。

mouse_map中间释放未抓取的paste_from_selection
mouse_map 左键按下未抓取 mouse_selection 正常
mouse_map ctrl+alt+左键按下未抓取的 mouse_selection 矩形
mouse_map 向左双击未抓取 mouse_selection 单词
mouse_map 向左三次按下未抓住 mouse_selection 线

#：选择整行

mouse_map ctrl+alt+left 三按未抓取 mouse_selection line_from_point

#：选择从点击的点到线尾

mouse_map 右键未抓取 mouse_selection 扩展
mouse_map shift+中键释放未抓取，抓取粘贴_选择
mouse_map Shift+左键 取消抓取，抓取 mouse_selection 正常
mouse_map shift+ctrl+alt+左键按下取消抓取，抓取mouse_selection矩形
mouse_map Shift+左键双击 取消抓取，抓取 mouse_selection 字
mouse_map shift+向左三按未抓取，已抓取 mouse_selection 线

#：选择整行

mouse_map shift+ctrl+alt+向左三按取消抓取，抓取 mouse_selection line_from_point

#：选择从点击的点到线尾

mouse_map Shift+右键 取消抓取，抓取 mouse_selection 扩展
#: }}}

#: }}}

#：性能调整{{{

重绘延迟 10

#：屏幕更新之间的延迟（以毫秒为单位）。减少它会增加每秒帧数 (FPS)，但代价是更多的 CPU 使用率。默认值约为 100 FPS，对于大多数用途来说已经足够了。请注意，要真正达到 100 FPS，您必须将sync_to_monitor 设置为 no 或使用具有高刷新率的显示器。此外，为了最大限度地减少有待处理的输入时的延迟，repaint_delay 会被忽略。

输入延迟 3

#：处理终端中运行的程序的输入之前的延迟（以毫秒为单位）。请注意，减少它会提高响应速度，但也会增加 CPU 使用率，并且可能会导致在每个循环上重绘整个屏幕的全屏程序中出现闪烁，因为 kitty 速度太快，以至于会绘制部分屏幕更新。

同步到监视器 是

#：将屏幕更新同步到显示器的刷新率。这可以防止滚动时撕裂（https://en.wikipedia.org/wiki/Screen_tearing）。但是，它将渲染速度限制为显示器的刷新率。使用非常高速的鼠标/高键盘重复率，您可能会注意到一些轻微的输入延迟。如果是这样，请将其设置为否。

#: }}}

#: 航站楼铃声 {{{

启用音频铃 是

#：启用/禁用音频铃声。在需要安静的环境中很有用。

视觉铃持续时间 0.0

#：视觉铃声持续时间。当铃声持续指定的秒数时，屏幕会闪烁。设置为零以禁用。

window_alert_on_bell 是

#：请求窗口注意铃声。使 Dock 图标在 macOS 上弹起或使任务栏在 Linux 上闪烁。

选项卡上的响铃 是

#：如果选项卡中的某个窗口出现响铃并且该窗口不是当前聚焦的窗口，则在选项卡上显示响铃符号

command_on_bell 无

#：铃声发生时运行的程序。

#: }}}

#: 窗口布局 {{{

Remember_window_size 是
初始窗口宽度 640
初始窗口高度 400

#：如果启用，将记住窗口大小，以便新的 kitty 实例将具有与前一个实例相同的大小。如果禁用，窗口最初的大小将由initial_window_width/height 配置，以像素为单位。您可以在宽度/高度值上使用后缀“c”，将它们解释为单元格数量而不是像素数量。

启用布局*

#：启用的窗口布局。以逗号分隔的布局名称列表。特殊值 all 表示所有布局。第一个列出的布局将用作启动布局。默认配置是按字母顺序排列的所有布局。有关可用布局的列表，请参阅 https://sw.kovidgoyal.net/kitty/index.html#layouts。

window_resize_step_cells 2
window_resize_step_lines 2

#：调整窗口大小时使用的步长（以单元格宽度/单元格高度为单位）。cells 值用于水平调整大小，lines 值用于垂直调整大小。

窗口边框宽度 0.5pt

#：窗口边框的宽度。可以以像素 (px) 或点 (pt) 为单位。以 pts 为单位的值将根据屏幕分辨率四舍五入到最接近的像素数。如果未指定，则假定单位为 pts。请注意，仅当多个窗口可见时才会显示边框。它们的目的是分隔多个窗口。

绘制最小边框 是

#：仅绘制所需的最小边框。这意味着仅绘制非活动窗口所需的最小边框。这只是将非活动窗口与相邻窗口分开的边界。请注意，设置非零窗口边距会覆盖此设置并导致绘制所有边框。

窗口边距宽度 0

#：窗口边距（以磅为单位）（边框外的空白区域）。单个值设置所有四个边。两个值设置垂直边和水平边。三个值设置顶部、水平和底部。四个值设置顶部、右侧、底部和左侧。

single_window_margin_width -1

#：当只有一个窗口可见时使用的窗口边距（以点为单位）。负值将导致使用 window_margin_width 的值。单个值设置所有四个边。两个值设置垂直边和水平边。三个值设置顶部、水平和底部。四个值设置顶部、右侧、底部和左侧。

窗口填充宽度 0

#：窗口填充（以磅为单位）（文本和窗口边框之间的空白区域）。单个值设置所有四个边。两个值设置垂直边和水平边。三个值设置顶部、水平和底部。四个值设置顶部、右侧、底部和左侧。

布局策略中心

#：当窗口大小不是单元格大小的精确倍数时，终端窗口的单元格区域的两侧将有一些额外的填充。您可以使用此选项控制填充的分布方式。使用 center 值意味着单元格区域将放置在中央。值为左上角意味着填充将仅位于底部和右侧边缘。

活动边框颜色#00ff00

#：活动窗口边框的颜色。将其设置为 none 可以不在活动窗口周围绘制边框。

inactive_border_color #cccccc

#：非活动窗口边框的颜色

响铃边框颜色 #ff5a00

#：发生响铃的非活动窗口边框的颜色

inactive_text_alpha 1.0

#：将非活动窗口中的文本淡入指定量（0 到 1 之间的数字，0 表示完全淡出）。

hide_window_decorations 否

#：使用 yes 隐藏窗口装饰（标题栏和窗口边框）。在 macOS 上，titlebar-only 可用于仅隐藏标题栏。这是否有效以及它的具体效果取决于窗口管理器/操作系统。请注意，重新加载配置时更改此设置的效果未定义。

resize_debounce_time 0.1

#：收到调整大小事件时重绘屏幕之前等待的时间（以秒为单位）。在 macOS 等平台上，操作系统发送与调整大小的开始和结束相对应的事件，该数字将被忽略。

resize_draw_strategy 静态

#：选择在调整大小时 kitty 如何绘制窗口。static 值表示绘制当前窗口内容，大部分不变。缩放值表示按比例绘制当前窗口内容。空白值意味着绘制一个空白窗口。size 值表示以单元格为单位显示窗口大小。

调整大小步骤 否

#：以与单元格一样大的步长调整操作系统窗口的大小，而不是使用通常的像素精度。与单元格数量中的initial_window_width和initial_window_height相结合，此选项可用于在调整操作系统窗口大小时保持边距尽可能小。请注意，这目前不适用于 Wayland。

确认操作系统窗口关闭 0

#：关闭操作系统窗口或其中至少包含此数量的 kitty 窗口的选项卡时要求确认。值为零将禁用确认。此确认也适用于退出整个应用程序的请求（所有操作系统窗口，通过退出操作）。

#: }}}

#: 标签栏 {{{

tab_bar_edge底部

#：在哪边显示标签栏，顶部还是底部

tab_bar_margin_width 0.0

#：标签栏左侧和右侧的边距（以磅为单位）

tab_bar_margin_height 0.0 0.0

#：标签栏上方和下方的边距（以磅为单位）。第一个数字是操作系统窗口边缘和选项卡栏之间的边距，第二个数字是选项卡栏和当前选项卡内容之间的边距。

tab_bar_style 淡入淡出

#：标签栏样式，可以是以下之一：淡入淡出、分隔符、电源线或隐藏。在淡入淡出样式中，每个选项卡的边缘淡入背景颜色，在分隔符样式中，选项卡由可配置的分隔符分隔，并且电源线将选项卡显示为连续线。如果您使用隐藏样式，您可能需要为 select_tab 操作创建一个映射，该操作会向您显示选项卡列表并允许轻松切换到选项卡。

tab_bar_min_tabs 2

#：显示选项卡栏之前必须存在的最少选项卡数量

tab_switch_strategy 上一个

#：当前选项卡关闭时切换到选项卡时使用的算法。默认的 previous 将切换到最后使用的选项卡。left 值将切换到已关闭选项卡左侧的选项卡。right 值将切换到已关闭选项卡右侧的选项卡。最后一个值将切换到最右侧的选项卡。

标签淡入淡出 0.25 0.5 0.75 1

#：当对 tab_bar_style 使用淡入淡出时，控制每个选项卡如何淡入背景。每个数字都是一个 alpha（介于 0 和 1 之间），控制相应单元格淡入背景的程度，0 表示不淡入淡出，1 表示完全淡出。您可以通过向此列表添加/删除条目来更改使用的单元格数量。

制表符分隔符“┇”

#：使用分隔符作为 tab_bar_style 时，选项卡栏中选项卡之间的分隔符。

tab_powerline_style 有角度

#：当使用 powerline 作为 tab_bar_style 时，选项卡栏中选项卡之间的 powerline 分隔符样式可以是以下之一：有角度的、倾斜的或圆形的。

tab_activity_symbol 无

#：如果选项卡中没有焦点的窗口有某些活动，则在选项卡上显示一些文本或 unicode 符号。

tab_title_template "{标题}"

#：呈现选项卡标题的模板。默认情况下仅呈现标题。如果您还希望包含制表符索引，请使用类似：{index}: {title}。如果您有为 goto_tab N 映射的快捷方式，则很有用。如果您希望将索引视为上标，请使用 {sup.index}。此外，您可以使用 {layout_name} 作为当前布局名称，使用 {num_windows} 作为选项卡中的窗口数量。请注意，格式化是由 Python 的字符串格式化机制完成的，因此您可以使用 {layout_name[:2].upper()} 来仅显示布局名称的前两个字母（大写）。如果要设置文本样式，可以使用样式指令，例如：{fmt.fg.red}red{fmt.fg.default}normal{fmt.bg._00FF00}green bg{fmt.bg.normal}。同样，对于粗体和斜体：{fmt.bold}粗体{fmt.nobold}正常{fmt.italic}斜体{fmt.noitalic}。

active_tab_title_template 无

#：用于活动选项卡的模板，如果未指定，则回退到 tab_title_template。

active_tab_foreground #000
active_tab_background #eee
active_tab_font_style 粗斜体
inactive_tab_foreground #444
inactive_tab_background #999
inactive_tab_font_style 正常

#：标签栏颜色和样式

tab_bar_background 无

#：标签栏的背景颜色。默认使用终端背景颜色。

#: }}}

#：配色方案{{{

前景#dddddd
背景#000000

#：前景色和背景色

背景不透明度 1.0

#：背景的不透明度。0 到 1 之间的数字，其中 1 不透明，0 完全透明。这仅在操作系统支持的情况下才有效（例如，在 X11 下使用合成器时）。请注意，它仅在与默认终端背景具有相同背景颜色的单元格中设置背景颜色的不透明度。这样，vim 中的状态栏、电源线提示等内容仍然看起来不错。但这意味着如果您在编辑器中使用带有背景颜色的颜色主题，它将不会呈现为透明。相反，您应该更改小猫配置中的默认背景颜色，而不是在编辑器配色方案中使用背景颜色。或者使用转义码在 shell 脚本中设置终端默认颜色以启动编辑器。请注意，使用小于 1 的值。0 是（可能是显着的）性能损失。如果你想动态改变窗口的透明度，请将dynamic_background_opacity设置为yes（默认情况下这是关闭的，因为它会产生性能成本）。仅当在原始配置中启用了dynamic_background_opacity时，重新加载配置时更改此设置才有效。

背景图像 无

#：背景图像的路径。必须为 PNG 格式。

平铺背景图像布局

#：是否平铺或缩放背景图像。

背景图像线性 否

#：背景图片缩放时，是否使用线性插值。

动态背景不透明度 否

#：允许使用键盘快捷键（increase_background_opacity 和decrease_background_opacity）或远程控制工具动态更改background_opacity。不支持通过重新加载配置来更改此设置。

背景色调 0.0

#：背景颜色对背景图像的着色程度。色调仅应用于文本区域下方，而不是边距/边框。使阅读文本变得更加容易。使用每个窗口的当前背景颜色完成着色。仅当设置了background_opacity并且支持透明窗口或设置了background_image时，此设置才适用。

暗淡不透明度 0.75

#：设置了 DIM/FAINT 属性的文本变暗程度。1 表示不调暗，0 表示完全调暗（即不可见）。

选择前景#000000

#：用鼠标选择的文本的前景。none 值表示保持颜色不变。

选择背景#fffacd

#：用鼠标选择的文本的背景。

#：颜色表{{{

#：256 种终端颜色。有8种基本颜色，每种颜色都有暗淡和明亮的版本，为前16种颜色。您可以将剩余的 240 种颜色设置为 color16 至 color255。

颜色0#000000
颜色8 #767676

＃： 黑色的

颜色1 #cc0403
color9 #f2201f

＃： 红色的

颜色2 #19cb00
颜色10 #23fd00

＃： 绿色的

颜色3#cecb00
颜色 11 #fffd00

＃： 黄色的

颜色4 #0d73cc
color12 #1a8fff

＃： 蓝色的

颜色5 #cb1ed1
color13 #fd28ff

#：洋红色

颜色6 #0dcdcd
color14 #14ffff

#：青色

颜色7 #dddddd
颜色 15 #ffffff

＃： 白色的

mark1_前景黑色

#：类型 1 标记的颜色

标记1_背景#98d3cb

#：类型 1 标记的颜色（浅钢蓝色）

mark2_foreground 黑色

#：类型 2 标记的颜色

标记2_背景#f2dcd3

#：类型 1 标记的颜色（米色）

mark3_foreground 黑色

#：类型 3 标记的颜色

标记3_背景#f274bc

#：类型 3 标记的颜色（紫色）

#: }}}

#: }}}

＃： 先进的 {{{

壳 。

#：要执行的shell程序。默认值 . 意味着使用任何设置为当前用户默认 shell 的 shell。请注意，在 macOS 上，如果更改此设置，则可能需要添加 --login 以确保 shell 以交互模式启动并读取其启动 rc 文件。

编辑。

#：编辑 kitty 配置文件或类似任务时使用的控制台编辑器。值为 . 意味着按顺序使用环境变量 VISUAL 和 EDITOR。请注意，这个环境变量不仅必须在 shell 启动脚本中设置，而且必须在系统范围内设置，否则 kitty 将看不到它。

close_on_child_death 否

#：子进程（shell）退出时关闭窗口。如果否（默认），当子进程退出时，只要仍有进程输出到终端（例如，被拒绝的进程或后台进程），终端将保持打开状态。如果是，则子进程退出后窗口将立即关闭。请注意，将其设置为 yes 意味着仍在使用终端的任何后台进程都可能会失败，因为它们的 stdout/stderr/stdin 不再工作。

允许远程控制 否

#：允许其他程序控制kitty。如果您打开此功能，其他程序可以控制 kitty 的所有方面，包括向 kitty 窗口发送文本、打开新窗口、关闭窗口、读取窗口内容等。请注意，这甚至可以通过 ssh 连接进行。如果您使用值“socket-only”，您可以选择允许在 kitty 中运行的任何程序来控制它，“yes”或仅连接到使用 kitty --listen-on 命令行选项指定的套接字的程序。如果您想阻止通过 ssh 在远程计算机上运行的程序控制 kitty，则后者很有用。通过重新加载配置来更改此选项只会影响新创建的窗口。

没有听

#：告诉kitty监听指定的unix/tcp套接字进行远程控制连接。请注意，这将适用于所有小猫实例。它可以被 kitty --listen-on 命令行标志覆盖。此选项仅接受 UNIX 套接字，例如 unix:${TEMP}/mykitty 或（在 Linux 上）unix:@mykitty。环境变量已扩展。如果 {kitty_pid} 存在，则将其替换为 kitty 进程的 PID，否则 kitty 进程的 PID 将附加到该值，并带有连字符。除非您还设置allow_remote_control 以启用远程控制，否则将忽略此选项。有关更多详细信息，请参阅 kitty --listen-on 的帮助。不支持通过重新加载配置来更改此选项。

# 环境

#：指定在所有子进程中设置的环境变量。请注意，环境变量是递归扩展的，因此如果您使用::

#: 环境 MYVAR1=a
#: env MYVAR2=${MYVAR1}/${HOME}/b

#：MYVAR2 的值将为 a/<主目录的路径>/b。

更新检查间隔 24

#：定期检查 kitty 是否有可用更新。如果发现更新，则会显示系统通知，通知您有可用的更新。默认为每 24 小时检查一次，设置为零以禁用。不支持通过重新加载配置来更改此选项。

启动会话 无

#：用于所有 kitty 实例的会话文件的路径。可以通过使用单个实例的 kitty --session 命令行选项来覆盖。有关详细信息，请参阅 kitty 文档中的 https://sw.kovidgoyal.net/kitty/index.html#sessions。请注意，相对路径是针对 kitty 配置目录进行解释的。路径中的环境变量被扩展。不支持通过重新加载配置来更改此选项。

Clipboard_control 写剪贴板 写主

#：允许kitty中运行的程序从剪贴板读取和写入。您可以准确控制允许哪些操作。可能的操作集是：写入剪贴板读取剪贴板写入主要读取主要。您还可以指定 no-append 来禁用 kitty 的剪贴板连接协议扩展。默认设置是允许写入剪贴板和启用串联的主要选择。请注意，启用读取功能是一种安全风险，因为这意味着任何程序，甚至是通过 SSH 在远程服务器上运行的程序都可以读取您的剪贴板。

允许超链接 是

#：处理超链接 (OSC 8) 转义序列。如果禁用 OSC 8 转义序列将被忽略。否则它们将成为可点击的链接，您可以通过按住 ctrl+shift 并用鼠标单击来单击。“ask” 的特殊值意味着 kitty 在打开链接之前会询问。

术语 xterm-kitty

#：要设置的 TERM 环境变量的值。更改此设置可能会破坏许多终端程序，只有在您知道自己在做什么时才更改它，而不是因为您阅读了 Stack Overflow 上的一些建议来更改它。各种程序使用 TERM 变量来获取有关终端的功能和行为的信息。如果您更改它，根据您运行的程序以及您要更改的终端的不同程度，从按键、颜色到各种高级功能的各种功能可能无法工作。通过重新加载配置来更改此选项只会影响新创建的窗口。

#: }}}

#: 操作系统特定的调整 {{{

wayland_titlebar_color系统

#：使用客户端窗口装饰（例如 GNOME）更改 Wayland 系统上 kitty 窗口标题栏的颜色。system 值表示使用默认系统颜色，background 值表示使用当前活动窗口的背景颜色，最后您可以使用任意颜色，例如#12af59 或红色。

macos_titlebar_color 系统

#：更改 macOS 上 kitty 窗口标题栏的颜色。system 值表示使用默认系统颜色，background 值表示使用当前活动窗口的背景颜色，最后您可以使用任意颜色，例如#12af59 或红色。警告：此选项通过使用 hack 来工作，因为没有合适的 Cocoa API。它设置整个窗口的背景颜色并使标题栏透明。因此它与background_opacity 不兼容。如果您想同时使用两者，最好使用 hide_window_decorations 隐藏标题栏。

macos_option_as_alt 否

#：使用 option 键作为 alt 键。如果将此设置为 no，kitty 将使用 macOS 本机 Option+Key = unicode 字符行为。这将破坏终端程序中的任何 Alt+键键盘快捷键，但您可以使用 macOS unicode 输入技术。您可以使用值：左、右或两者来仅使用左、右或两个 Option 键作为 Alt。不支持通过重新加载配置来更改此设置。

macos_hide_from_tasks 否

#：在 macOS 上隐藏运行任务中的 kitty 窗口 (⌘+Tab)。不支持通过重新加载配置来更改此设置。

macos_quit_when_last_window_close 否

#：当所有顶层窗口都关闭时让 kitty 退出。默认情况下，即使没有打开窗口，kitty 也会保持运行，这也是 macOS 上的预期行为。

macos_window_ressized 是

#：如果您希望 kitty 顶级 (OS) 窗口在 macOS 上无法调整大小，请禁用此选项。通过重新加载配置来更改此设置只会影响新创建的窗口。

macos_thicken_font 0

#：在给定宽度的字体周围绘制额外的边框，以提高小字体尺寸下的易读性。例如，值为 0.75 将导致渲染看起来类似于常见字体大小的子像素抗锯齿。

macos_traditional_fullscreen 否

#：使用传统的全屏过渡，速度更快，但不太美观。

macos_show_window_title_全部

#：在 macOS 窗口或菜单栏中显示或隐藏窗口标题。window 值将在 macOS 窗口顶部显示当前活动窗口的标题。menubar 的值将在 macOS 菜单栏中显示当前活动窗口的标题，从而充分利用浪费的空间。all 会在各处显示标题，none 会隐藏窗口和菜单栏中的标题。

macos_custom_beam_cursor 否

#：启用/禁用 macOS 的自定义鼠标光标，以便在浅色和深色背景上更容易看到。警告：这可能会使您的鼠标光标在双 GPU 计算机上不可见。不支持通过重新加载配置来更改此设置。

linux_display_server 自动

#：在 Wayland 和 X11 后端之间进行选择。默认情况下，会根据系统状态自动选择适当的后端。将其设置为 x11 或 wayland 以强制选择。不支持通过重新加载配置来更改此设置。

#: }}}

＃： 键盘快捷键 {{{

#：键仅通过小写 unicode 字符进行标识。例如：“a” 代表 A 键，“[” 代表左方括号键等。对于功能键，例如“Enter 或 Escape”，名称位于 https://sw .kovidgoyal.net/kitty/keyboard-protocol.html#function-key-definitions。有关修饰符名称的列表，请参阅：GLFW mods <https://www.glfw.org/docs/latest/group__mods.html>

#：在 Linux 上，您还可以使用 XKB 键名称来绑定 GLFW 不支持的键。请参阅 XKB 键 <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-keysyms.h> 以获取键名称列表。要使用的名称是 XKB_KEY_ 前缀之后的部分。请注意，您只能对不称为 GLFW 密钥的密钥使用 XKB 密钥名称。

#：最后，您可以使用原始系统键代码来映射键，同样仅适用于不称为 GLFW 键的键。要查看某个键的系统键代码，请使用 kitty --debug-input 选项启动 kitty。然后 kitty 将为每个关键事件输出一些调试文本。在该文本中查找“native_code”，其值将成为快捷方式中的键名称。例如：

#: .. 代码块:: 无

#： on_key_input：glfw 键：65 native_code：0x61 操作：PRESS mods：0x0 文本：'a'

#：这里，A 键的键名是 0x61，您可以将其与::

#: 地图 ctrl+0x61 一些东西

#：将 ctrl+a 映射到某个东西。

#: 您可以使用特殊操作 no_op 取消映射默认配置中分配的键盘快捷键::

#: 地图 kitty_mod+space no_op

#：您可以使用以下语法组合​​由单个快捷方式触发的多个操作::

#: 映射键组合 <分隔符> action1 <分隔符> action2 <分隔符> action3 ...

＃： 例如：：

#: 地图 kitty_mod+e 组合 : new_window : next_layout

#：这将创建一个新窗口并切换到下一个可用布局

#：您可以使用多键快捷键，语法如下所示：：

#: 映射 key1>key2>key3 操作

＃： 例如：：

#: 地图 ctrl+f>2 set_font_size 20

kitty_mod ctrl+shift

#: kitty_mod 的值用作所有默认快捷键的修饰符，您可以在 kitty.conf 中更改它来更改所有默认快捷键的修饰符。

清除所有快捷方式 否

#：您可以让 kitty 删除到目前为止看到的所有快捷方式定义。例如，对于删除默认快捷方式很有用。

# kitten_alias 提示 提示 --hints-offset=0

#：您可以为小猫名称创建别名，这允许覆盖小猫选项的默认值，也可用于缩短同一只小猫与特定选项组的重复映射。例如，上面的别名将所有映射（包括内置映射）的 kitty +kittenhints --hints-offset 的默认值更改为零。

＃： 剪贴板 {{{

地图 kitty_mod+c copy_to_clipboard

#：还有一个 copy_or_interrupt 操作可以选择映射到 Ctrl+c。仅当有选择时才会复制，否则发送中断。同样，copy_and_clear_or_interrupt 将复制并清除选择，如果没有选择则发送中断。

地图 kitty_mod+v 从剪贴板粘贴
地图 kitty_mod+s 从选择中粘贴
映射 kitty_mod+o pass_selection_to_program

#：您还可以使用 pass_selection_to_program 将当前选择的内容传递到任何程序。默认情况下，使用系统的打开程序，但您可以指定自己的，选择将作为命令行参数传递给程序，例如：

#: 映射 kitty_mod+o pass_selection_to_program firefox

#：您可以使用 @selection 占位符将当前选择传递到在新的 kitty 窗口中运行的终端程序::

#: 映射 kitty_mod+y new_window 减去 @selection

#: }}}

#：滚动{{{

地图 kitty_mod+向上scroll_line_up
地图 kitty_mod+向下scroll_line_down
地图 kitty_mod+page_up 滚动_page_up
地图 kitty_mod+page_down 滚动_page_down
地图 kitty_mod+homescroll_home
地图 kitty_mod+endscroll_end
地图 kitty_mod+h show_scrollback

#：您可以使用“launch”函数将当前屏幕+历史缓冲区的内容作为 STDIN 通过管道传输到任意程序。例如，以下命令在覆盖窗口中的 less 中打开回滚缓冲区：

#: 地图 f1 启动 --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#：有关外部程序的管道屏幕和缓冲区内容的更多详细信息，请参阅启动。

#: }}}

#: 窗口管理 {{{

地图 kitty_mod+输入 new_window

#：您可以打开一个新窗口运行任意程序，例如：：

#: 地图 kitty_mod+y 启动 mutt

#: 您可以打开一个新窗口，并将当前工作目录设置为当前窗口的工作目录，使用::

#: 地图 ctrl+alt+enter launch --cwd=current

#：您可以打开一个新窗口，通过在命令行中添加@前缀，可以通过kitty远程控制工具来控制kitty。在该窗口中运行的任何程序都将被允许控制 kitty。例如：：
#: 地图 ctrl+enter launch --allow-remote-control some_program

#：您可以在当前活动窗口旁边打开一个新窗口或作为第一个窗口，使用::

#: 地图 ctrl+n launch --location=neighbor some_program 地图 ctrl+f launch --location=first some_program

#：有关更多详细信息，请参阅启动。

地图 kitty_mod+n new_os_window

#：与上面的 new_window 类似，只是它打开一个顶级 OS kitty 窗口。特别是，您可以使用 new_os_window_with_cwd 打开具有当前工作目录的窗口。

地图 kitty_mod+w close_window
地图 kitty_mod+] next_window
地图 kitty_mod+[ previous_window
地图 kitty_mod+f move_window_forward
地图 kitty_mod+b move_window_backward
地图 kitty_mod+` move_window_to_top
地图 kitty_mod+r start_resizing_window
地图 kitty_mod+1 first_window
地图 kitty_mod+2 secondary_window
地图 kitty_mod+3 Third_window
地图 kitty_mod+4 Fourth_window
地图 kitty_mod+5 Fifth_window
地图 kitty_mod+6 Sixth_window
地图 kitty_mod+7 Seventh_window
地图 kitty_mod+8第八窗口
地图 kitty_mod+9 ninth_window
地图 kitty_mod+0 tenth_window
#: }}}

#: 选项卡管理 {{{

地图 kitty_mod+右侧 next_tab
地图 kitty_mod+左 previous_tab
地图 kitty_mod+t new_tab
地图 kitty_mod+q close_tab
地图 shift+cmd+w close_os_window
地图kitty_mod+。向前移动选项卡
地图 kitty_mod+，move_tab_backward
地图 kitty_mod+alt+t set_tab_title

#：您还可以创建转到特定选项卡的快捷方式，1 是第一个选项卡，2 是第二个选项卡，-1 是之前活动的选项卡，任何大于最后一个选项卡的数字都是最后一个选项卡::

#: 地图 ctrl+alt+1 goto_tab 1
#: 地图 ctrl+alt+2 goto_tab 2

#：与上面的new_window一样，您也可以在使用new_tab和使用new_tab_with_cwd时传递要运行的任意命令的名称。最后，如果您希望新选项卡在当前选项卡旁边而不是在选项卡列表末尾打开，请使用：

#: map ctrl+t new_tab !neighbor [可选的 cmd 运行]
#: }}}

#: 布局管理 {{{

地图 kitty_mod+l next_layout

#: 您还可以创建快捷方式来切换到特定布局::

#: 地图 ctrl+alt+t goto_layout high
#：映射ctrl+alt+s goto_layout堆栈

#: 同样，切换回之前的布局::

#: 地图 ctrl+alt+p last_used_layout
#: }}}

#: 字体大小 {{{

#：您可以一次更改所有顶级 kitty 操作系统窗口的字体大小，也可以仅更改当前窗口的字体大小。

映射kitty_mod+等于change_font_size全部+2.0
地图 kitty_mod+减去change_font_size 全部-2.0
映射kitty_mod+退格键change_font_size全部为0

#: 设置特定字体大小的快捷方式::

#: 映射 kitty_mod+f6 change_font_size 全部 10.0

#：设置快捷方式以仅更改当前操作系统窗口的字体大小：

#: 映射 kitty_mod+f6 change_font_size 当前 10.0
#: }}}

#：选择可见文本并对其进行操作 {{{

#：使用提示小猫选择文本并将其传递给外部程序或将其插入终端或复制到剪贴板。

地图 kitty_mod+e 小猫提示

#：使用键盘打开当前可见的 URL。使用的程序
#：打开的URL是在open_url_with中指定的。

map kitty_mod+p>f 小猫提示 --输入路径 --program -

#：选择路径/文件名并将其插入终端。很有用，例如对先前 git 命令输出的文件名运行 git 命令。

地图 kitty_mod+p>shift+f 小猫提示 --输入路径

#：选择路径/文件名并使用默认打开程序打开它。

地图 kitty_mod+p>l 小猫提示 --type line --program -

#：选择一行文本并将其插入到终端中。用于诸如以下内容的输出： ls -1

地图 kitty_mod+p>w 小猫提示 --输入单词 --program -

#：选择单词并插入终端。

map kitty_mod+p>h 小猫提示 --type hash --program -

#：选择看起来像散列的内容并将其插入终端。对 git 很有用，它使用 sha1 哈希值来识别提交

地图 kitty_mod+p>n 小猫提示 --type linenum

#：选择类似于 filename:linenum 的内容并在 vim 中的指定行号处打开它。

地图 kitty_mod+p>y 小猫提示 --输入超链接

#：选择一个超链接（即已由终端程序标记为超链接的 URL，例如通过 ls --hyperlink=auto）。


#：提示小猫有更多的操作模式，您可以映射到不同的快捷键。有关完整的描述，请参阅小猫/提示。
#: }}}

＃： 各种各样的 {{{

地图 kitty_mod+f11 切换全屏
地图 kitty_mod+f10 切换最大化
映射 kitty_mod+u 小猫 unicode_input
映射 kitty_mod+f2 edit_config_file
映射 kitty_mod+escape kitty_shell 窗口

#：在新窗口/选项卡/overlay/os_window中打开kitty shell，使用命令控制kitty。

地图 kitty_mod+a>m set_background_opacity +0.1
地图 kitty_mod+a>l set_background_opacity -0.1
地图 kitty_mod+a>1 set_background_opacity 1
地图 kitty_mod+a>d set_background_opacity 默认值
映射 kitty_mod+删除clear_terminal 重置活动

#：您可以创建快捷方式来清除/重置终端。例如：：

#: # 重置终端
#: 地图 kitty_mod+f9 clear_terminal 重置激活
#: # 通过擦除所有内容来清除终端屏幕
#: 映射 kitty_mod+f10 clear_terminal 清除活动状态
#: # 通过擦除来清除终端回滚
#: 地图 kitty_mod+f11 clear_terminal 回滚活动
#: # 将屏幕内容滚动到回滚中
#: 地图 kitty_mod+f12 clear_terminal 滚动激活

#：如果你想对所有窗口而不只是当前窗口进行操作，请使用all而不是active。

#：还可以重新映射 Ctrl+L 以将当前屏幕内容滚动到回滚缓冲区并清除屏幕，而不仅仅是清除屏幕，例如，对于 ZSH，将以下内容添加到 ~/.zshrc：

#: .. 代码块:: sh

#: 滚动和清屏() {
#: printf '\n%.0s' {1..$LINES}
#: zle 清屏
＃：}
#: zle -N 滚动并清屏
#: 绑定键 '^l' 滚动并清屏

映射 kitty_mod+f5 load_config_file

#：重新加载 kitty.conf，应用自上次加载以来的所有更改。请注意，少数设置无法动态更改，并且需要完全重新启动 kitty。您还可以映射键绑定来加载不同的配置文件，例如：

#: 映射 f5 load_config /path/to/alternative/kitty.conf

#：请注意，原始 kitty.conf 中的所有设置都将被丢弃，换句话说，新的conf设置*替换*旧的设置。

映射 kitty_mod+f6 debug_config

#：显示有关 kitty 正在运行的配置及其主机环境的详细信息。对于调试问题很有用。


#：你可以告诉kitty在按下指定的快捷键时发送任意（UTF-8）编码的文本到客户端程序。例如：：

#: 映射 ctrl+alt+a send_text all 特殊文本

#：当您按下 ctrl+alt+a 组合键时，将发送“特殊文本”。要发送的文本是 python 字符串文字，因此您可以使用 \x1b 等转义符发送控制代码或 \u21fb 发送 unicode 字符（或者您可以直接将 unicode 字符作为 UTF-8 文本输入）。send_text 的第一个参数是激活快捷键的键盘模式。可能的值是正常或应用程序或小猫或逗号分隔的它们的组合。特殊关键字 all 表示所有模式。正常模式和应用模式是指终端的DECCKM光标键模式，kitty是指特殊的kitty扩展键盘协议。

#：另一个例子，输出一个单词，然后将光标移动到行首（与按 Home 键相同）::

#: 映射ctrl+alt+a send_text 普通Word\x1b[H
#: 映射 ctrl+alt+a send_text 应用 Word\x1bOH

#: }}}

#: }}}

